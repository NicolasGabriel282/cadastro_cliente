// GENERATED CODE - DO NOT MODIFY BY HAND
// This code was generated by ObjectBox. To update it run the generator again
// with `dart run build_runner build`.
// See also https://docs.objectbox.io/getting-started#generate-objectbox-code

// ignore_for_file: camel_case_types, depend_on_referenced_packages
// coverage:ignore-file

import 'dart:typed_data';

import 'package:flat_buffers/flat_buffers.dart' as fb;
import 'package:objectbox/internal.dart'
    as obx_int; // generated code can access "internal" functionality
import 'package:objectbox/objectbox.dart' as obx;
import 'package:objectbox_flutter_libs/objectbox_flutter_libs.dart';

import 'model/checklist_model.dart';
import 'model/objectbox.dart';

export 'package:objectbox/objectbox.dart'; // so that callers only have to import this file

final _entities = <obx_int.ModelEntity>[
  obx_int.ModelEntity(
    id: const obx_int.IdUid(1, 1027336598408671115),
    name: 'Cliente',
    lastPropertyId: const obx_int.IdUid(44, 8823132489490646018),
    flags: 0,
    properties: <obx_int.ModelProperty>[
      obx_int.ModelProperty(
        id: const obx_int.IdUid(1, 7976633727726795668),
        name: 'id',
        type: 6,
        flags: 1,
      ),
      obx_int.ModelProperty(
        id: const obx_int.IdUid(2, 2111300956095700270),
        name: 'CNPJ',
        type: 9,
        flags: 0,
      ),
      obx_int.ModelProperty(
        id: const obx_int.IdUid(3, 1859551151191552112),
        name: 'RazaoSocial',
        type: 9,
        flags: 0,
      ),
      obx_int.ModelProperty(
        id: const obx_int.IdUid(4, 1485020584827714607),
        name: 'InscEstadual',
        type: 9,
        flags: 0,
      ),
      obx_int.ModelProperty(
        id: const obx_int.IdUid(5, 5965857286987760919),
        name: 'InscMuni',
        type: 9,
        flags: 0,
      ),
      obx_int.ModelProperty(
        id: const obx_int.IdUid(6, 6265053420185299911),
        name: 'CEP',
        type: 9,
        flags: 0,
      ),
      obx_int.ModelProperty(
        id: const obx_int.IdUid(7, 7494247901555940286),
        name: 'Rua',
        type: 9,
        flags: 0,
      ),
      obx_int.ModelProperty(
        id: const obx_int.IdUid(8, 3381145830845352167),
        name: 'Numero',
        type: 9,
        flags: 0,
      ),
      obx_int.ModelProperty(
        id: const obx_int.IdUid(9, 487080309168772087),
        name: 'Bairro',
        type: 9,
        flags: 0,
      ),
      obx_int.ModelProperty(
        id: const obx_int.IdUid(10, 5850200410960865063),
        name: 'Cidade',
        type: 9,
        flags: 0,
      ),
      obx_int.ModelProperty(
        id: const obx_int.IdUid(11, 8970066782643636640),
        name: 'UF',
        type: 9,
        flags: 0,
      ),
      obx_int.ModelProperty(
        id: const obx_int.IdUid(12, 162322931387859560),
        name: 'InforComple',
        type: 9,
        flags: 0,
      ),
      obx_int.ModelProperty(
        id: const obx_int.IdUid(13, 3854313289794135415),
        name: 'CEPLCD',
        type: 9,
        flags: 0,
      ),
      obx_int.ModelProperty(
        id: const obx_int.IdUid(14, 8895870200454362600),
        name: 'RuaLCD',
        type: 9,
        flags: 0,
      ),
      obx_int.ModelProperty(
        id: const obx_int.IdUid(15, 672402502061880138),
        name: 'BairroLCD',
        type: 9,
        flags: 0,
      ),
      obx_int.ModelProperty(
        id: const obx_int.IdUid(16, 3433441624552455360),
        name: 'CidadeLCD',
        type: 9,
        flags: 0,
      ),
      obx_int.ModelProperty(
        id: const obx_int.IdUid(17, 3675781767946825863),
        name: 'UFLCD',
        type: 9,
        flags: 0,
      ),
      obx_int.ModelProperty(
        id: const obx_int.IdUid(18, 8629134500287076109),
        name: 'NumeroLCD',
        type: 9,
        flags: 0,
      ),
      obx_int.ModelProperty(
        id: const obx_int.IdUid(19, 4239407583782778477),
        name: 'InforCompleLCD',
        type: 9,
        flags: 0,
      ),
      obx_int.ModelProperty(
        id: const obx_int.IdUid(20, 1195740207607427908),
        name: 'InforCompleLE',
        type: 9,
        flags: 0,
      ),
      obx_int.ModelProperty(
        id: const obx_int.IdUid(22, 2027219616668147561),
        name: 'CEPLE',
        type: 9,
        flags: 0,
      ),
      obx_int.ModelProperty(
        id: const obx_int.IdUid(23, 3492438422838524819),
        name: 'RuaLE',
        type: 9,
        flags: 0,
      ),
      obx_int.ModelProperty(
        id: const obx_int.IdUid(24, 4811188070279567845),
        name: 'NumeroLE',
        type: 9,
        flags: 0,
      ),
      obx_int.ModelProperty(
        id: const obx_int.IdUid(25, 6617112772094243735),
        name: 'BairroLE',
        type: 9,
        flags: 0,
      ),
      obx_int.ModelProperty(
        id: const obx_int.IdUid(26, 2871493584427479129),
        name: 'CidadeLE',
        type: 9,
        flags: 0,
      ),
      obx_int.ModelProperty(
        id: const obx_int.IdUid(27, 5694974123845484492),
        name: 'UFLE',
        type: 9,
        flags: 0,
      ),
      obx_int.ModelProperty(
        id: const obx_int.IdUid(28, 5892711240049869675),
        name: 'Frete',
        type: 9,
        flags: 0,
      ),
      obx_int.ModelProperty(
        id: const obx_int.IdUid(29, 4052914664161991751),
        name: 'VolEstimado',
        type: 9,
        flags: 0,
      ),
      obx_int.ModelProperty(
        id: const obx_int.IdUid(30, 4042985588637481616),
        name: 'VolPrevPedido',
        type: 9,
        flags: 0,
      ),
      obx_int.ModelProperty(
        id: const obx_int.IdUid(31, 2962143332824865499),
        name: 'CapaTanque',
        type: 9,
        flags: 0,
      ),
      obx_int.ModelProperty(
        id: const obx_int.IdUid(32, 2202737274023090769),
        name: 'HoraLimite',
        type: 9,
        flags: 0,
      ),
      obx_int.ModelProperty(
        id: const obx_int.IdUid(33, 8229644217542233156),
        name: 'TipoLigEle',
        type: 9,
        flags: 0,
      ),
      obx_int.ModelProperty(
        id: const obx_int.IdUid(34, 4580973237720197842),
        name: 'RespoPeloRece',
        type: 9,
        flags: 0,
      ),
      obx_int.ModelProperty(
        id: const obx_int.IdUid(35, 7361736632695158886),
        name: 'Mangote',
        type: 9,
        flags: 0,
      ),
      obx_int.ModelProperty(
        id: const obx_int.IdUid(36, 340346754808699569),
        name: 'CliPossuBalan',
        type: 9,
        flags: 0,
      ),
      obx_int.ModelProperty(
        id: const obx_int.IdUid(37, 3882168847657546272),
        name: 'TipoEntre',
        type: 9,
        flags: 0,
      ),
      obx_int.ModelProperty(
        id: const obx_int.IdUid(38, 3755230345800844463),
        name: 'RepeluOuClien',
        type: 9,
        flags: 0,
      ),
      obx_int.ModelProperty(
        id: const obx_int.IdUid(39, 6394997192331263761),
        name: 'RegiANP',
        type: 9,
        flags: 0,
      ),
      obx_int.ModelProperty(
        id: const obx_int.IdUid(40, 5994137849702292665),
        name: 'Tele',
        type: 9,
        flags: 0,
      ),
      obx_int.ModelProperty(
        id: const obx_int.IdUid(41, 6086327005837952342),
        name: 'ObsTipoTamanho',
        type: 9,
        flags: 0,
      ),
      obx_int.ModelProperty(
        id: const obx_int.IdUid(42, 4598244138925494460),
        name: 'RestriCami',
        type: 9,
        flags: 0,
      ),
      obx_int.ModelProperty(
        id: const obx_int.IdUid(43, 5791674012610097285),
        name: 'InfoCompleCP',
        type: 9,
        flags: 0,
      ),
      obx_int.ModelProperty(
        id: const obx_int.IdUid(44, 8823132489490646018),
        name: 'ApresComerciCP',
        type: 9,
        flags: 0,
      ),
    ],
    relations: <obx_int.ModelRelation>[
      obx_int.ModelRelation(
        id: const obx_int.IdUid(1, 8379727340687021386),
        name: 'produtos',
        targetId: const obx_int.IdUid(2, 7685654565975572917),
      ),
    ],
    backlinks: <obx_int.ModelBacklink>[
      obx_int.ModelBacklink(
        name: 'documentos',
        srcEntity: 'CheckListItem',
        srcField: 'cliente',
      ),
    ],
  ),
  obx_int.ModelEntity(
    id: const obx_int.IdUid(2, 7685654565975572917),
    name: 'Produto',
    lastPropertyId: const obx_int.IdUid(4, 5656343844309070410),
    flags: 0,
    properties: <obx_int.ModelProperty>[
      obx_int.ModelProperty(
        id: const obx_int.IdUid(1, 5489808152740321155),
        name: 'id',
        type: 6,
        flags: 1,
      ),
      obx_int.ModelProperty(
        id: const obx_int.IdUid(2, 1097484432838979833),
        name: 'NomeProduto',
        type: 9,
        flags: 0,
      ),
      obx_int.ModelProperty(
        id: const obx_int.IdUid(3, 2676220685017692124),
        name: 'PrazoPagamento',
        type: 9,
        flags: 0,
      ),
      obx_int.ModelProperty(
        id: const obx_int.IdUid(4, 5656343844309070410),
        name: 'PrecoLitro',
        type: 9,
        flags: 0,
      ),
    ],
    relations: <obx_int.ModelRelation>[],
    backlinks: <obx_int.ModelBacklink>[],
  ),
  obx_int.ModelEntity(
    id: const obx_int.IdUid(3, 7320122582419741767),
    name: 'CheckListItem',
    lastPropertyId: const obx_int.IdUid(6, 7766707758887130751),
    flags: 0,
    properties: <obx_int.ModelProperty>[
      obx_int.ModelProperty(
        id: const obx_int.IdUid(1, 3713931074170172804),
        name: 'id',
        type: 6,
        flags: 1,
      ),
      obx_int.ModelProperty(
        id: const obx_int.IdUid(2, 2822031602701061823),
        name: 'title',
        type: 9,
        flags: 0,
      ),
      obx_int.ModelProperty(
        id: const obx_int.IdUid(3, 4534133823419192882),
        name: 'isCompleted',
        type: 1,
        flags: 0,
      ),
      obx_int.ModelProperty(
        id: const obx_int.IdUid(4, 1597728181843491194),
        name: 'filePath',
        type: 9,
        flags: 0,
      ),
      obx_int.ModelProperty(
        id: const obx_int.IdUid(5, 7490758455964755987),
        name: 'lastUpdated',
        type: 10,
        flags: 0,
      ),
      obx_int.ModelProperty(
        id: const obx_int.IdUid(6, 7766707758887130751),
        name: 'clienteId',
        type: 11,
        flags: 520,
        indexId: const obx_int.IdUid(1, 8365662459693108534),
        relationTarget: 'Cliente',
      ),
    ],
    relations: <obx_int.ModelRelation>[],
    backlinks: <obx_int.ModelBacklink>[],
  ),
];

/// Shortcut for [obx.Store.new] that passes [getObjectBoxModel] and for Flutter
/// apps by default a [directory] using `defaultStoreDirectory()` from the
/// ObjectBox Flutter library.
///
/// Note: for desktop apps it is recommended to specify a unique [directory].
///
/// See [obx.Store.new] for an explanation of all parameters.
///
/// For Flutter apps, also calls `loadObjectBoxLibraryAndroidCompat()` from
/// the ObjectBox Flutter library to fix loading the native ObjectBox library
/// on Android 6 and older.
Future<obx.Store> openStore({
  String? directory,
  int? maxDBSizeInKB,
  int? maxDataSizeInKB,
  int? fileMode,
  int? maxReaders,
  bool queriesCaseSensitiveDefault = true,
  String? macosApplicationGroup,
}) async {
  await loadObjectBoxLibraryAndroidCompat();
  return obx.Store(
    getObjectBoxModel(),
    directory: directory ?? (await defaultStoreDirectory()).path,
    maxDBSizeInKB: maxDBSizeInKB,
    maxDataSizeInKB: maxDataSizeInKB,
    fileMode: fileMode,
    maxReaders: maxReaders,
    queriesCaseSensitiveDefault: queriesCaseSensitiveDefault,
    macosApplicationGroup: macosApplicationGroup,
  );
}

/// Returns the ObjectBox model definition for this project for use with
/// [obx.Store.new].
obx_int.ModelDefinition getObjectBoxModel() {
  final model = obx_int.ModelInfo(
    entities: _entities,
    lastEntityId: const obx_int.IdUid(3, 7320122582419741767),
    lastIndexId: const obx_int.IdUid(1, 8365662459693108534),
    lastRelationId: const obx_int.IdUid(2, 8373873206917320911),
    lastSequenceId: const obx_int.IdUid(0, 0),
    retiredEntityUids: const [],
    retiredIndexUids: const [],
    retiredPropertyUids: const [6473737242600915311],
    retiredRelationUids: const [8373873206917320911],
    modelVersion: 5,
    modelVersionParserMinimum: 5,
    version: 1,
  );

  final bindings = <Type, obx_int.EntityDefinition>{
    Cliente: obx_int.EntityDefinition<Cliente>(
      model: _entities[0],
      toOneRelations: (Cliente object) => [],
      toManyRelations: (Cliente object) => {
        obx_int.RelInfo<Cliente>.toMany(1, object.id): object.produtos,
        obx_int.RelInfo<CheckListItem>.toOneBacklink(
          6,
          object.id,
          (CheckListItem srcObject) => srcObject.cliente,
        ): object.documentos,
      },
      getId: (Cliente object) => object.id,
      setId: (Cliente object, int id) {
        object.id = id;
      },
      objectToFB: (Cliente object, fb.Builder fbb) {
        final CNPJOffset = fbb.writeString(object.CNPJ);
        final RazaoSocialOffset = fbb.writeString(object.RazaoSocial);
        final InscEstadualOffset = fbb.writeString(object.InscEstadual);
        final InscMuniOffset = fbb.writeString(object.InscMuni);
        final CEPOffset = fbb.writeString(object.CEP);
        final RuaOffset = fbb.writeString(object.Rua);
        final NumeroOffset = fbb.writeString(object.Numero);
        final BairroOffset = fbb.writeString(object.Bairro);
        final CidadeOffset = fbb.writeString(object.Cidade);
        final UFOffset = fbb.writeString(object.UF);
        final InforCompleOffset = object.InforComple == null
            ? null
            : fbb.writeString(object.InforComple!);
        final CEPLCDOffset = object.CEPLCD == null
            ? null
            : fbb.writeString(object.CEPLCD!);
        final RuaLCDOffset = object.RuaLCD == null
            ? null
            : fbb.writeString(object.RuaLCD!);
        final BairroLCDOffset = object.BairroLCD == null
            ? null
            : fbb.writeString(object.BairroLCD!);
        final CidadeLCDOffset = object.CidadeLCD == null
            ? null
            : fbb.writeString(object.CidadeLCD!);
        final UFLCDOffset = object.UFLCD == null
            ? null
            : fbb.writeString(object.UFLCD!);
        final NumeroLCDOffset = object.NumeroLCD == null
            ? null
            : fbb.writeString(object.NumeroLCD!);
        final InforCompleLCDOffset = object.InforCompleLCD == null
            ? null
            : fbb.writeString(object.InforCompleLCD!);
        final InforCompleLEOffset = object.InforCompleLE == null
            ? null
            : fbb.writeString(object.InforCompleLE!);
        final CEPLEOffset = fbb.writeString(object.CEPLE);
        final RuaLEOffset = fbb.writeString(object.RuaLE);
        final NumeroLEOffset = fbb.writeString(object.NumeroLE);
        final BairroLEOffset = fbb.writeString(object.BairroLE);
        final CidadeLEOffset = fbb.writeString(object.CidadeLE);
        final UFLEOffset = fbb.writeString(object.UFLE);
        final FreteOffset = fbb.writeString(object.Frete);
        final VolEstimadoOffset = fbb.writeString(object.VolEstimado);
        final VolPrevPedidoOffset = fbb.writeString(object.VolPrevPedido);
        final CapaTanqueOffset = fbb.writeString(object.CapaTanque);
        final HoraLimiteOffset = fbb.writeString(object.HoraLimite);
        final TipoLigEleOffset = fbb.writeString(object.TipoLigEle);
        final RespoPeloReceOffset = fbb.writeString(object.RespoPeloRece);
        final MangoteOffset = fbb.writeString(object.Mangote);
        final CliPossuBalanOffset = object.CliPossuBalan == null
            ? null
            : fbb.writeString(object.CliPossuBalan!);
        final TipoEntreOffset = object.TipoEntre == null
            ? null
            : fbb.writeString(object.TipoEntre!);
        final RepeluOuClienOffset = object.RepeluOuClien == null
            ? null
            : fbb.writeString(object.RepeluOuClien!);
        final RegiANPOffset = object.RegiANP == null
            ? null
            : fbb.writeString(object.RegiANP!);
        final TeleOffset = fbb.writeString(object.Tele);
        final ObsTipoTamanhoOffset = fbb.writeString(object.ObsTipoTamanho);
        final RestriCamiOffset = fbb.writeString(object.RestriCami);
        final InfoCompleCPOffset = object.InfoCompleCP == null
            ? null
            : fbb.writeString(object.InfoCompleCP!);
        final ApresComerciCPOffset = object.ApresComerciCP == null
            ? null
            : fbb.writeString(object.ApresComerciCP!);
        fbb.startTable(45);
        fbb.addInt64(0, object.id);
        fbb.addOffset(1, CNPJOffset);
        fbb.addOffset(2, RazaoSocialOffset);
        fbb.addOffset(3, InscEstadualOffset);
        fbb.addOffset(4, InscMuniOffset);
        fbb.addOffset(5, CEPOffset);
        fbb.addOffset(6, RuaOffset);
        fbb.addOffset(7, NumeroOffset);
        fbb.addOffset(8, BairroOffset);
        fbb.addOffset(9, CidadeOffset);
        fbb.addOffset(10, UFOffset);
        fbb.addOffset(11, InforCompleOffset);
        fbb.addOffset(12, CEPLCDOffset);
        fbb.addOffset(13, RuaLCDOffset);
        fbb.addOffset(14, BairroLCDOffset);
        fbb.addOffset(15, CidadeLCDOffset);
        fbb.addOffset(16, UFLCDOffset);
        fbb.addOffset(17, NumeroLCDOffset);
        fbb.addOffset(18, InforCompleLCDOffset);
        fbb.addOffset(19, InforCompleLEOffset);
        fbb.addOffset(21, CEPLEOffset);
        fbb.addOffset(22, RuaLEOffset);
        fbb.addOffset(23, NumeroLEOffset);
        fbb.addOffset(24, BairroLEOffset);
        fbb.addOffset(25, CidadeLEOffset);
        fbb.addOffset(26, UFLEOffset);
        fbb.addOffset(27, FreteOffset);
        fbb.addOffset(28, VolEstimadoOffset);
        fbb.addOffset(29, VolPrevPedidoOffset);
        fbb.addOffset(30, CapaTanqueOffset);
        fbb.addOffset(31, HoraLimiteOffset);
        fbb.addOffset(32, TipoLigEleOffset);
        fbb.addOffset(33, RespoPeloReceOffset);
        fbb.addOffset(34, MangoteOffset);
        fbb.addOffset(35, CliPossuBalanOffset);
        fbb.addOffset(36, TipoEntreOffset);
        fbb.addOffset(37, RepeluOuClienOffset);
        fbb.addOffset(38, RegiANPOffset);
        fbb.addOffset(39, TeleOffset);
        fbb.addOffset(40, ObsTipoTamanhoOffset);
        fbb.addOffset(41, RestriCamiOffset);
        fbb.addOffset(42, InfoCompleCPOffset);
        fbb.addOffset(43, ApresComerciCPOffset);
        fbb.finish(fbb.endTable());
        return object.id;
      },
      objectFromFB: (obx.Store store, ByteData fbData) {
        final buffer = fb.BufferContext(fbData);
        final rootOffset = buffer.derefObject(0);
        final idParam = const fb.Int64Reader().vTableGet(
          buffer,
          rootOffset,
          4,
          0,
        );
        final CNPJParam = const fb.StringReader(
          asciiOptimization: true,
        ).vTableGet(buffer, rootOffset, 6, '');
        final RazaoSocialParam = const fb.StringReader(
          asciiOptimization: true,
        ).vTableGet(buffer, rootOffset, 8, '');
        final InscEstadualParam = const fb.StringReader(
          asciiOptimization: true,
        ).vTableGet(buffer, rootOffset, 10, '');
        final InscMuniParam = const fb.StringReader(
          asciiOptimization: true,
        ).vTableGet(buffer, rootOffset, 12, '');
        final CEPParam = const fb.StringReader(
          asciiOptimization: true,
        ).vTableGet(buffer, rootOffset, 14, '');
        final RuaParam = const fb.StringReader(
          asciiOptimization: true,
        ).vTableGet(buffer, rootOffset, 16, '');
        final NumeroParam = const fb.StringReader(
          asciiOptimization: true,
        ).vTableGet(buffer, rootOffset, 18, '');
        final BairroParam = const fb.StringReader(
          asciiOptimization: true,
        ).vTableGet(buffer, rootOffset, 20, '');
        final CidadeParam = const fb.StringReader(
          asciiOptimization: true,
        ).vTableGet(buffer, rootOffset, 22, '');
        final UFParam = const fb.StringReader(
          asciiOptimization: true,
        ).vTableGet(buffer, rootOffset, 24, '');
        final InforCompleParam = const fb.StringReader(
          asciiOptimization: true,
        ).vTableGetNullable(buffer, rootOffset, 26);
        final CEPLCDParam = const fb.StringReader(
          asciiOptimization: true,
        ).vTableGetNullable(buffer, rootOffset, 28);
        final RuaLCDParam = const fb.StringReader(
          asciiOptimization: true,
        ).vTableGetNullable(buffer, rootOffset, 30);
        final BairroLCDParam = const fb.StringReader(
          asciiOptimization: true,
        ).vTableGetNullable(buffer, rootOffset, 32);
        final CidadeLCDParam = const fb.StringReader(
          asciiOptimization: true,
        ).vTableGetNullable(buffer, rootOffset, 34);
        final UFLCDParam = const fb.StringReader(
          asciiOptimization: true,
        ).vTableGetNullable(buffer, rootOffset, 36);
        final NumeroLCDParam = const fb.StringReader(
          asciiOptimization: true,
        ).vTableGetNullable(buffer, rootOffset, 38);
        final InforCompleLCDParam = const fb.StringReader(
          asciiOptimization: true,
        ).vTableGetNullable(buffer, rootOffset, 40);
        final CEPLEParam = const fb.StringReader(
          asciiOptimization: true,
        ).vTableGet(buffer, rootOffset, 46, '');
        final RuaLEParam = const fb.StringReader(
          asciiOptimization: true,
        ).vTableGet(buffer, rootOffset, 48, '');
        final NumeroLEParam = const fb.StringReader(
          asciiOptimization: true,
        ).vTableGet(buffer, rootOffset, 50, '');
        final BairroLEParam = const fb.StringReader(
          asciiOptimization: true,
        ).vTableGet(buffer, rootOffset, 52, '');
        final CidadeLEParam = const fb.StringReader(
          asciiOptimization: true,
        ).vTableGet(buffer, rootOffset, 54, '');
        final UFLEParam = const fb.StringReader(
          asciiOptimization: true,
        ).vTableGet(buffer, rootOffset, 56, '');
        final InforCompleLEParam = const fb.StringReader(
          asciiOptimization: true,
        ).vTableGetNullable(buffer, rootOffset, 42);
        final FreteParam = const fb.StringReader(
          asciiOptimization: true,
        ).vTableGet(buffer, rootOffset, 58, '');
        final VolEstimadoParam = const fb.StringReader(
          asciiOptimization: true,
        ).vTableGet(buffer, rootOffset, 60, '');
        final VolPrevPedidoParam = const fb.StringReader(
          asciiOptimization: true,
        ).vTableGet(buffer, rootOffset, 62, '');
        final CapaTanqueParam = const fb.StringReader(
          asciiOptimization: true,
        ).vTableGet(buffer, rootOffset, 64, '');
        final HoraLimiteParam = const fb.StringReader(
          asciiOptimization: true,
        ).vTableGet(buffer, rootOffset, 66, '');
        final TipoLigEleParam = const fb.StringReader(
          asciiOptimization: true,
        ).vTableGet(buffer, rootOffset, 68, '');
        final RespoPeloReceParam = const fb.StringReader(
          asciiOptimization: true,
        ).vTableGet(buffer, rootOffset, 70, '');
        final MangoteParam = const fb.StringReader(
          asciiOptimization: true,
        ).vTableGet(buffer, rootOffset, 72, '');
        final CliPossuBalanParam = const fb.StringReader(
          asciiOptimization: true,
        ).vTableGetNullable(buffer, rootOffset, 74);
        final TipoEntreParam = const fb.StringReader(
          asciiOptimization: true,
        ).vTableGetNullable(buffer, rootOffset, 76);
        final RepeluOuClienParam = const fb.StringReader(
          asciiOptimization: true,
        ).vTableGetNullable(buffer, rootOffset, 78);
        final RegiANPParam = const fb.StringReader(
          asciiOptimization: true,
        ).vTableGetNullable(buffer, rootOffset, 80);
        final TeleParam = const fb.StringReader(
          asciiOptimization: true,
        ).vTableGet(buffer, rootOffset, 82, '');
        final ObsTipoTamanhoParam = const fb.StringReader(
          asciiOptimization: true,
        ).vTableGet(buffer, rootOffset, 84, '');
        final RestriCamiParam = const fb.StringReader(
          asciiOptimization: true,
        ).vTableGet(buffer, rootOffset, 86, '');
        final InfoCompleCPParam = const fb.StringReader(
          asciiOptimization: true,
        ).vTableGetNullable(buffer, rootOffset, 88);
        final ApresComerciCPParam = const fb.StringReader(
          asciiOptimization: true,
        ).vTableGetNullable(buffer, rootOffset, 90);
        final object = Cliente(
          id: idParam,
          CNPJ: CNPJParam,
          RazaoSocial: RazaoSocialParam,
          InscEstadual: InscEstadualParam,
          InscMuni: InscMuniParam,
          CEP: CEPParam,
          Rua: RuaParam,
          Numero: NumeroParam,
          Bairro: BairroParam,
          Cidade: CidadeParam,
          UF: UFParam,
          InforComple: InforCompleParam,
          CEPLCD: CEPLCDParam,
          RuaLCD: RuaLCDParam,
          BairroLCD: BairroLCDParam,
          CidadeLCD: CidadeLCDParam,
          UFLCD: UFLCDParam,
          NumeroLCD: NumeroLCDParam,
          InforCompleLCD: InforCompleLCDParam,
          CEPLE: CEPLEParam,
          RuaLE: RuaLEParam,
          NumeroLE: NumeroLEParam,
          BairroLE: BairroLEParam,
          CidadeLE: CidadeLEParam,
          UFLE: UFLEParam,
          InforCompleLE: InforCompleLEParam,
          Frete: FreteParam,
          VolEstimado: VolEstimadoParam,
          VolPrevPedido: VolPrevPedidoParam,
          CapaTanque: CapaTanqueParam,
          HoraLimite: HoraLimiteParam,
          TipoLigEle: TipoLigEleParam,
          RespoPeloRece: RespoPeloReceParam,
          Mangote: MangoteParam,
          CliPossuBalan: CliPossuBalanParam,
          TipoEntre: TipoEntreParam,
          RepeluOuClien: RepeluOuClienParam,
          RegiANP: RegiANPParam,
          Tele: TeleParam,
          ObsTipoTamanho: ObsTipoTamanhoParam,
          RestriCami: RestriCamiParam,
          InfoCompleCP: InfoCompleCPParam,
          ApresComerciCP: ApresComerciCPParam,
        );
        obx_int.InternalToManyAccess.setRelInfo<Cliente>(
          object.produtos,
          store,
          obx_int.RelInfo<Cliente>.toMany(1, object.id),
        );
        obx_int.InternalToManyAccess.setRelInfo<Cliente>(
          object.documentos,
          store,
          obx_int.RelInfo<CheckListItem>.toOneBacklink(
            6,
            object.id,
            (CheckListItem srcObject) => srcObject.cliente,
          ),
        );
        return object;
      },
    ),
    Produto: obx_int.EntityDefinition<Produto>(
      model: _entities[1],
      toOneRelations: (Produto object) => [],
      toManyRelations: (Produto object) => {},
      getId: (Produto object) => object.id,
      setId: (Produto object, int id) {
        object.id = id;
      },
      objectToFB: (Produto object, fb.Builder fbb) {
        final NomeProdutoOffset = object.NomeProduto == null
            ? null
            : fbb.writeString(object.NomeProduto!);
        final PrazoPagamentoOffset = object.PrazoPagamento == null
            ? null
            : fbb.writeString(object.PrazoPagamento!);
        final PrecoLitroOffset = object.PrecoLitro == null
            ? null
            : fbb.writeString(object.PrecoLitro!);
        fbb.startTable(5);
        fbb.addInt64(0, object.id);
        fbb.addOffset(1, NomeProdutoOffset);
        fbb.addOffset(2, PrazoPagamentoOffset);
        fbb.addOffset(3, PrecoLitroOffset);
        fbb.finish(fbb.endTable());
        return object.id;
      },
      objectFromFB: (obx.Store store, ByteData fbData) {
        final buffer = fb.BufferContext(fbData);
        final rootOffset = buffer.derefObject(0);
        final idParam = const fb.Int64Reader().vTableGet(
          buffer,
          rootOffset,
          4,
          0,
        );
        final NomeProdutoParam = const fb.StringReader(
          asciiOptimization: true,
        ).vTableGetNullable(buffer, rootOffset, 6);
        final PrazoPagamentoParam = const fb.StringReader(
          asciiOptimization: true,
        ).vTableGetNullable(buffer, rootOffset, 8);
        final PrecoLitroParam = const fb.StringReader(
          asciiOptimization: true,
        ).vTableGetNullable(buffer, rootOffset, 10);
        final object = Produto(
          id: idParam,
          NomeProduto: NomeProdutoParam,
          PrazoPagamento: PrazoPagamentoParam,
          PrecoLitro: PrecoLitroParam,
        );

        return object;
      },
    ),
    CheckListItem: obx_int.EntityDefinition<CheckListItem>(
      model: _entities[2],
      toOneRelations: (CheckListItem object) => [object.cliente],
      toManyRelations: (CheckListItem object) => {},
      getId: (CheckListItem object) => object.id,
      setId: (CheckListItem object, int id) {
        object.id = id;
      },
      objectToFB: (CheckListItem object, fb.Builder fbb) {
        final titleOffset = fbb.writeString(object.title);
        final filePathOffset = object.filePath == null
            ? null
            : fbb.writeString(object.filePath!);
        fbb.startTable(7);
        fbb.addInt64(0, object.id);
        fbb.addOffset(1, titleOffset);
        fbb.addBool(2, object.isCompleted);
        fbb.addOffset(3, filePathOffset);
        fbb.addInt64(4, object.lastUpdated?.millisecondsSinceEpoch);
        fbb.addInt64(5, object.cliente.targetId);
        fbb.finish(fbb.endTable());
        return object.id;
      },
      objectFromFB: (obx.Store store, ByteData fbData) {
        final buffer = fb.BufferContext(fbData);
        final rootOffset = buffer.derefObject(0);
        final lastUpdatedValue = const fb.Int64Reader().vTableGetNullable(
          buffer,
          rootOffset,
          12,
        );
        final idParam = const fb.Int64Reader().vTableGet(
          buffer,
          rootOffset,
          4,
          0,
        );
        final titleParam = const fb.StringReader(
          asciiOptimization: true,
        ).vTableGet(buffer, rootOffset, 6, '');
        final isCompletedParam = const fb.BoolReader().vTableGet(
          buffer,
          rootOffset,
          8,
          false,
        );
        final filePathParam = const fb.StringReader(
          asciiOptimization: true,
        ).vTableGetNullable(buffer, rootOffset, 10);
        final lastUpdatedParam = lastUpdatedValue == null
            ? null
            : DateTime.fromMillisecondsSinceEpoch(lastUpdatedValue);
        final object = CheckListItem(
          id: idParam,
          title: titleParam,
          isCompleted: isCompletedParam,
          filePath: filePathParam,
          lastUpdated: lastUpdatedParam,
        );
        object.cliente.targetId = const fb.Int64Reader().vTableGet(
          buffer,
          rootOffset,
          14,
          0,
        );
        object.cliente.attach(store);
        return object;
      },
    ),
  };

  return obx_int.ModelDefinition(model, bindings);
}

/// [Cliente] entity fields to define ObjectBox queries.
class Cliente_ {
  /// See [Cliente.id].
  static final id = obx.QueryIntegerProperty<Cliente>(
    _entities[0].properties[0],
  );

  /// See [Cliente.CNPJ].
  static final CNPJ = obx.QueryStringProperty<Cliente>(
    _entities[0].properties[1],
  );

  /// See [Cliente.RazaoSocial].
  static final RazaoSocial = obx.QueryStringProperty<Cliente>(
    _entities[0].properties[2],
  );

  /// See [Cliente.InscEstadual].
  static final InscEstadual = obx.QueryStringProperty<Cliente>(
    _entities[0].properties[3],
  );

  /// See [Cliente.InscMuni].
  static final InscMuni = obx.QueryStringProperty<Cliente>(
    _entities[0].properties[4],
  );

  /// See [Cliente.CEP].
  static final CEP = obx.QueryStringProperty<Cliente>(
    _entities[0].properties[5],
  );

  /// See [Cliente.Rua].
  static final Rua = obx.QueryStringProperty<Cliente>(
    _entities[0].properties[6],
  );

  /// See [Cliente.Numero].
  static final Numero = obx.QueryStringProperty<Cliente>(
    _entities[0].properties[7],
  );

  /// See [Cliente.Bairro].
  static final Bairro = obx.QueryStringProperty<Cliente>(
    _entities[0].properties[8],
  );

  /// See [Cliente.Cidade].
  static final Cidade = obx.QueryStringProperty<Cliente>(
    _entities[0].properties[9],
  );

  /// See [Cliente.UF].
  static final UF = obx.QueryStringProperty<Cliente>(
    _entities[0].properties[10],
  );

  /// See [Cliente.InforComple].
  static final InforComple = obx.QueryStringProperty<Cliente>(
    _entities[0].properties[11],
  );

  /// See [Cliente.CEPLCD].
  static final CEPLCD = obx.QueryStringProperty<Cliente>(
    _entities[0].properties[12],
  );

  /// See [Cliente.RuaLCD].
  static final RuaLCD = obx.QueryStringProperty<Cliente>(
    _entities[0].properties[13],
  );

  /// See [Cliente.BairroLCD].
  static final BairroLCD = obx.QueryStringProperty<Cliente>(
    _entities[0].properties[14],
  );

  /// See [Cliente.CidadeLCD].
  static final CidadeLCD = obx.QueryStringProperty<Cliente>(
    _entities[0].properties[15],
  );

  /// See [Cliente.UFLCD].
  static final UFLCD = obx.QueryStringProperty<Cliente>(
    _entities[0].properties[16],
  );

  /// See [Cliente.NumeroLCD].
  static final NumeroLCD = obx.QueryStringProperty<Cliente>(
    _entities[0].properties[17],
  );

  /// See [Cliente.InforCompleLCD].
  static final InforCompleLCD = obx.QueryStringProperty<Cliente>(
    _entities[0].properties[18],
  );

  /// See [Cliente.InforCompleLE].
  static final InforCompleLE = obx.QueryStringProperty<Cliente>(
    _entities[0].properties[19],
  );

  /// See [Cliente.CEPLE].
  static final CEPLE = obx.QueryStringProperty<Cliente>(
    _entities[0].properties[20],
  );

  /// See [Cliente.RuaLE].
  static final RuaLE = obx.QueryStringProperty<Cliente>(
    _entities[0].properties[21],
  );

  /// See [Cliente.NumeroLE].
  static final NumeroLE = obx.QueryStringProperty<Cliente>(
    _entities[0].properties[22],
  );

  /// See [Cliente.BairroLE].
  static final BairroLE = obx.QueryStringProperty<Cliente>(
    _entities[0].properties[23],
  );

  /// See [Cliente.CidadeLE].
  static final CidadeLE = obx.QueryStringProperty<Cliente>(
    _entities[0].properties[24],
  );

  /// See [Cliente.UFLE].
  static final UFLE = obx.QueryStringProperty<Cliente>(
    _entities[0].properties[25],
  );

  /// See [Cliente.Frete].
  static final Frete = obx.QueryStringProperty<Cliente>(
    _entities[0].properties[26],
  );

  /// See [Cliente.VolEstimado].
  static final VolEstimado = obx.QueryStringProperty<Cliente>(
    _entities[0].properties[27],
  );

  /// See [Cliente.VolPrevPedido].
  static final VolPrevPedido = obx.QueryStringProperty<Cliente>(
    _entities[0].properties[28],
  );

  /// See [Cliente.CapaTanque].
  static final CapaTanque = obx.QueryStringProperty<Cliente>(
    _entities[0].properties[29],
  );

  /// See [Cliente.HoraLimite].
  static final HoraLimite = obx.QueryStringProperty<Cliente>(
    _entities[0].properties[30],
  );

  /// See [Cliente.TipoLigEle].
  static final TipoLigEle = obx.QueryStringProperty<Cliente>(
    _entities[0].properties[31],
  );

  /// See [Cliente.RespoPeloRece].
  static final RespoPeloRece = obx.QueryStringProperty<Cliente>(
    _entities[0].properties[32],
  );

  /// See [Cliente.Mangote].
  static final Mangote = obx.QueryStringProperty<Cliente>(
    _entities[0].properties[33],
  );

  /// See [Cliente.CliPossuBalan].
  static final CliPossuBalan = obx.QueryStringProperty<Cliente>(
    _entities[0].properties[34],
  );

  /// See [Cliente.TipoEntre].
  static final TipoEntre = obx.QueryStringProperty<Cliente>(
    _entities[0].properties[35],
  );

  /// See [Cliente.RepeluOuClien].
  static final RepeluOuClien = obx.QueryStringProperty<Cliente>(
    _entities[0].properties[36],
  );

  /// See [Cliente.RegiANP].
  static final RegiANP = obx.QueryStringProperty<Cliente>(
    _entities[0].properties[37],
  );

  /// See [Cliente.Tele].
  static final Tele = obx.QueryStringProperty<Cliente>(
    _entities[0].properties[38],
  );

  /// See [Cliente.ObsTipoTamanho].
  static final ObsTipoTamanho = obx.QueryStringProperty<Cliente>(
    _entities[0].properties[39],
  );

  /// See [Cliente.RestriCami].
  static final RestriCami = obx.QueryStringProperty<Cliente>(
    _entities[0].properties[40],
  );

  /// See [Cliente.InfoCompleCP].
  static final InfoCompleCP = obx.QueryStringProperty<Cliente>(
    _entities[0].properties[41],
  );

  /// See [Cliente.ApresComerciCP].
  static final ApresComerciCP = obx.QueryStringProperty<Cliente>(
    _entities[0].properties[42],
  );

  /// see [Cliente.produtos]
  static final produtos = obx.QueryRelationToMany<Cliente, Produto>(
    _entities[0].relations[0],
  );

  /// see [Cliente.documentos]
  static final documentos = obx.QueryBacklinkToMany<CheckListItem, Cliente>(
    CheckListItem_.cliente,
  );
}

/// [Produto] entity fields to define ObjectBox queries.
class Produto_ {
  /// See [Produto.id].
  static final id = obx.QueryIntegerProperty<Produto>(
    _entities[1].properties[0],
  );

  /// See [Produto.NomeProduto].
  static final NomeProduto = obx.QueryStringProperty<Produto>(
    _entities[1].properties[1],
  );

  /// See [Produto.PrazoPagamento].
  static final PrazoPagamento = obx.QueryStringProperty<Produto>(
    _entities[1].properties[2],
  );

  /// See [Produto.PrecoLitro].
  static final PrecoLitro = obx.QueryStringProperty<Produto>(
    _entities[1].properties[3],
  );
}

/// [CheckListItem] entity fields to define ObjectBox queries.
class CheckListItem_ {
  /// See [CheckListItem.id].
  static final id = obx.QueryIntegerProperty<CheckListItem>(
    _entities[2].properties[0],
  );

  /// See [CheckListItem.title].
  static final title = obx.QueryStringProperty<CheckListItem>(
    _entities[2].properties[1],
  );

  /// See [CheckListItem.isCompleted].
  static final isCompleted = obx.QueryBooleanProperty<CheckListItem>(
    _entities[2].properties[2],
  );

  /// See [CheckListItem.filePath].
  static final filePath = obx.QueryStringProperty<CheckListItem>(
    _entities[2].properties[3],
  );

  /// See [CheckListItem.lastUpdated].
  static final lastUpdated = obx.QueryDateProperty<CheckListItem>(
    _entities[2].properties[4],
  );

  /// See [CheckListItem.cliente].
  static final cliente = obx.QueryRelationToOne<CheckListItem, Cliente>(
    _entities[2].properties[5],
  );
}
